[gd_scene load_steps=13 format=2]

[ext_resource path="res://Nodes/Ship.tscn" type="PackedScene" id=1]
[ext_resource path="res://Nodes/Obstacles/Electrofield.tscn" type="PackedScene" id=2]
[ext_resource path="res://Nodes/Obstacles/Magnetic Field.tscn" type="PackedScene" id=3]
[ext_resource path="res://Nodes/Obstacles/Laser.tscn" type="PackedScene" id=4]
[ext_resource path="res://Sprites/Common/LaserEmitter.png" type="Texture" id=5]
[ext_resource path="res://Nodes/Obstacles/DarkMatter.tscn" type="PackedScene" id=6]
[ext_resource path="res://Resources/NewBiggerFont.tres" type="DynamicFont" id=7]
[ext_resource path="res://Sprites/Common/Electron.png" type="Texture" id=8]

[sub_resource type="Shader" id=1]

code = "shader_type canvas_item;

uniform vec4 outline_color : hint_color;
uniform float outline_width = 3.0;

void fragment() {
	vec2 ps = TEXTURE_PIXEL_SIZE;
	
	float dx = ps.x * outline_width;
	float dy = ps.y * outline_width;
	
	float hs = 0.70711; // sqrt(2) / 2
	float hx = dx * hs;
	float hy = dy * hs;
	
	float a = (
		texture(TEXTURE, UV + vec2(dx, .0)).a +
		texture(TEXTURE, UV + vec2(-dx, .0)).a +
		texture(TEXTURE, UV + vec2(.0, dy)).a +
		texture(TEXTURE, UV + vec2(.0, -dy)).a +
		
		texture(TEXTURE, UV + vec2(hx, hy)).a +
		texture(TEXTURE, UV + vec2(-hx, hy)).a +
		texture(TEXTURE, UV + vec2(hx, -hy)).a +
		texture(TEXTURE, UV + vec2(-hx, -hy)).a
	);
	
	vec4 original = texture(TEXTURE, UV);
	float blend = max(0.0, a - 7.0);
	vec4 mixed = mix(outline_color, original, blend);
	COLOR = vec4(mixed.rgb, floor(original.a + 0.2) + 0.2);
}"

[sub_resource type="ShaderMaterial" id=2]

render_priority = 0
shader = SubResource( 1 )
shader_param/outline_color = Color( 0, 0.765625, 1, 1 )
shader_param/outline_width = 0.2
_sections_unfolded = [ "shader_param" ]

[sub_resource type="Shader" id=3]

code = "shader_type canvas_item;
render_mode unshaded;

uniform int intensity : hint_range(0,200); 
uniform float sizex : hint_range(0,1000);
uniform float sizey : hint_range(0,1000);
uniform vec4 outline_color : hint_color;

varying vec2 o;
varying vec2 f;

void vertex()
{
    o = VERTEX;
    vec2 uv = (UV - 0.5);
    VERTEX += uv * float(intensity);
    f = VERTEX;
}

void fragment()
{
    vec2 regular_uv;
    regular_uv.x = UV.x + (f.x - o.x)/(sizex);
    regular_uv.y = UV.y + (f.y - o.y)/(sizey);

    vec4 regular_color = texture(TEXTURE, regular_uv);
    if((regular_uv.x < 0.0 || regular_uv.x > 1.0) || (regular_uv.y < 0.0 || regular_uv.y > 1.0) || regular_color.a <=0.25){
        regular_color = vec4(0.0); 
    }

    vec2 ps = TEXTURE_PIXEL_SIZE * float(intensity) / 100.0;

    vec4 final_color = regular_color;
    for(int x = -1; x <= 1; x += 1){
        for(int y = -1; y <= 1; y += 1){
            //Get the X and Y offset from this
            if (x==0 && y==0)
                continue;

            vec2 outline_uv = regular_uv + vec2(float(x) * ps.x, float(y) * ps.y); 

            //Sample here, if we are out of bounds then fail
            vec4 outline_sample = texture(TEXTURE, outline_uv);
            if((outline_uv.x < 0.0 || outline_uv.x > 1.0) || (outline_uv.y < 0.0 || outline_uv.y > 1.0)){
                //We aren't a real color
                outline_sample = vec4(0);
            }

            //Is our sample empty? Is there something nearby?
            if(outline_sample.a > final_color.a){
                final_color = outline_color;
            }
        }
    }
    COLOR = final_color;
}"

[sub_resource type="ShaderMaterial" id=4]

render_priority = 0
shader = SubResource( 3 )
shader_param/intensity = 10
shader_param/sizex = 80.0
shader_param/sizey = 80.0
shader_param/outline_color = null
_sections_unfolded = [ "shader_param" ]

[node name="Sandbox" type="Sprite" index="0"]

position = Vector2( 0.902527, 0 )

[node name="Players" type="Node2D" parent="." index="0"]

editor/display_folded = true

[node name="Ship" parent="Players" index="0" instance=ExtResource( 1 )]

editor/display_folded = true

[node name="Camera2D" type="Camera2D" parent="Players/Ship" index="2"]

anchor_mode = 1
rotating = false
current = true
zoom = Vector2( 1, 1 )
limit_left = -10000000
limit_top = -10000000
limit_right = 10000000
limit_bottom = 10000000
limit_smoothed = false
drag_margin_h_enabled = true
drag_margin_v_enabled = true
smoothing_enabled = false
smoothing_speed = 5.0
offset_v = 0.0
offset_h = 0.0
drag_margin_left = 0.2
drag_margin_top = 0.2
drag_margin_right = 0.2
drag_margin_bottom = 0.2
editor_draw_screen = true
editor_draw_limits = false
editor_draw_drag_margin = false

[node name="Electrofield" parent="." index="1" instance=ExtResource( 2 )]

position = Vector2( -6.716, 243.521 )
direction = 1

[node name="Magnetic Field" parent="." index="2" instance=ExtResource( 3 )]

position = Vector2( -312.616, -387.996 )
width = 512
height = 512

[node name="Magnetic Field2" parent="." index="3" instance=ExtResource( 3 )]

position = Vector2( -1007.75, -529.484 )
width = 512
height = 512
orientation = 1

[node name="Laser" parent="." index="4" instance=ExtResource( 4 )]

editor/display_folded = true
position = Vector2( 163.346, -122.261 )

[node name="End" type="Sprite" parent="Laser" index="1"]

position = Vector2( 215.851, -97.3933 )
texture = ExtResource( 5 )
_sections_unfolded = [ "Transform" ]

[node name="DarkMatter" parent="." index="5" instance=ExtResource( 6 )]

position = Vector2( 762.475, 49.6752 )

[node name="Laser2" parent="." index="6" instance=ExtResource( 4 )]

position = Vector2( 179.122, -302.972 )

[node name="Laser3" parent="." index="7" instance=ExtResource( 4 )]

position = Vector2( 143.958, -417.066 )

[node name="Label" type="Label" parent="." index="8"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 567.0
margin_top = -320.0
margin_right = 1202.0
margin_bottom = -208.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 4
custom_fonts/font = ExtResource( 7 )
custom_colors/font_color_shadow = Color( 0, 0.671875, 1, 1 )
custom_constants/shadow_as_outline = 1
text = "To jest testowy tekst, gdzie widać czcionkę i są polskie znaki. Ą"
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
_sections_unfolded = [ "Material", "Visibility", "custom_colors", "custom_constants", "custom_fonts" ]

[node name="Label3" type="Label" parent="." index="9"]

anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 674.0
margin_top = -191.0
margin_right = 1309.0
margin_bottom = -79.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 4
custom_fonts/font = ExtResource( 7 )
custom_colors/font_color_shadow = Color( 0, 0.671875, 1, 1 )
custom_constants/shadow_as_outline = 1
text = "ĄąĆćĘęŁłÓóŹźŻżŃń"
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
_sections_unfolded = [ "Material", "Visibility", "custom_colors", "custom_constants", "custom_fonts" ]

[node name="Label2" type="Label" parent="." index="10"]

material = SubResource( 2 )
anchor_left = 0.0
anchor_top = 0.0
anchor_right = 0.0
anchor_bottom = 0.0
margin_left = 558.0
margin_top = -471.0
margin_right = 1193.0
margin_bottom = -359.0
rect_pivot_offset = Vector2( 0, 0 )
rect_clip_content = false
mouse_filter = 2
mouse_default_cursor_shape = 0
size_flags_horizontal = 1
size_flags_vertical = 4
custom_fonts/font = ExtResource( 7 )
text = "To jest testowy tekst, gdzie widać czcionkę i są polskie znaki."
percent_visible = 1.0
lines_skipped = 0
max_lines_visible = -1
_sections_unfolded = [ "Material", "Visibility", "custom_colors", "custom_constants", "custom_fonts" ]

[node name="Electron" type="Sprite" parent="." index="11"]

material = SubResource( 4 )
position = Vector2( 701.881, -69.3292 )
texture = ExtResource( 8 )
_sections_unfolded = [ "Material" ]


